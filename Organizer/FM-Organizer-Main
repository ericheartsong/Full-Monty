////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//  Lady Green Forensic Component     : FULLMONTY - ORGANIZER
//
//  Signature                         : LGF/APPS/FULLMONTY/ORGANIZER
//  Component version                 : 1.0.0
//  release date                      : September 2024
//
//  Description : This component allow to rezz a show : decor + orchestrator.
//
//
//  copyright © Lady Green Forensic 2023
//
//  This script is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License, version 3
//  (https://www.gnu.org/licenses/gpl-3.0.html)lcode)
//
///////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////
// constants
////////////////////////////////////
string K_Version = "1.0.0"; // version of the component

string K_ID_MESSAGELINK_ORGANIZER = "ORGANIZER";

string K_HEADER_MSG_REGISTER_POS_REQUEST = "FM:REGISTER_POSITION_REQUEST";
string K_HEADER_MSG_REGISTER_POS_RESPONSE = "FM:REGISTER_POSITION_RESPONSE";
string K_HEADER_MSG_REZZAT_POS_REQUEST = "FM:REZZ_AT_POSITION_REQUEST";
string K_HEADER_MSG_REZZAT_POS_RESPONSE = "FM:REZZ_AT_POSITION_RESPONSE";
string K_HEADER_MSG_UNREZZ = "FM:UNREZZ";

integer K_CHANNEL_CONFIG = 9;
string K_ID_MESSAGELINK_CONFIG_FROM= "CONFIGURATION_FROM";
string K_ID_MESSAGELINK_CONFIG_TO= "CONFIGURATION_TO";
string K_MSG_SEND_CONFIG = "SEND_CONFIG";

// MessageLinked integer message codes;

string K_ID_MESSAGELINK_RESTORE = "RESTORE_ORGANIZER";
string K_ID_MESSAGELINK_SAVE = "SAVE_ORGANIZER";

integer K_START_SAVE = 0;
integer K_SHOW_ITEM_STRING_SAVE = 1;
integer K_SHOW_ITEM_VECTOR_SAVE = 2;
integer K_POS_REZZER_STRING_SAVE = 5;
integer K_POS_REZZER_VECTOR_SAVE = 6;
integer K_END_SAVE = 10;

integer K_START_RESTORE = 100;
integer K_SHOW_ITEM_STRING_RESTORE = 101;
integer K_SHOW_ITEM_VECTOR_RESTORE = 102;
integer K_POS_REZZER_STRING_RESTORE = 105;
integer K_POS_REZZER_VECTOR_RESTORE = 106;
integer K_END_RESTORE = 110;
////////////////////////////////////
// variables
////////////////////////////////////
integer uuidOrganizer;
integer debugMode = 0;
integer listenOrganizer = 0;
integer channelOrganizer = 0;
integer listenCmd = 0;
integer channelCmd = 4;

key rezzerUser;
string currentShow = "skyfall";
string showToRezz = "";
list showItems = [];
list inventory = [];
list posRezzer = [];
////////////////////////////////////
// log function
////////////////////////////////////
debug (string pLog) {
    if (debugMode == 1) {
        llSay(DEBUG_CHANNEL,llGetScriptName()  + ":" + pLog);
    }
}

////////////////////////////////////
// Error function
////////////////////////////////////
error (string errorCode, string pLog) {
    llSay(DEBUG_CHANNEL,llGetScriptName()  + ":" + errorCode + ":  " + pLog);
}

////////////////////////////////////
// config integration
////////////////////////////////////
getConfig(){
    llMessageLinked(LINK_SET, 0, K_MSG_SEND_CONFIG, (key)K_ID_MESSAGELINK_CONFIG_TO);
}

string getHelp() {
    return  "*****  List of commands  *****\n\n" +
        "'name <showName> = select the name of the show to register.\n"+
        "register = register the show previously defined by command 'name'.\n"+
        "list = list all registered shows.\n"+
        "list <showName> = list all items registered for that show with position and rotation.\n"+
        "rezz <showName> = rezz the show identified by <showname>.\n"+
        "unrezz <showName> = unrezz all items to thow identifier by <showname>.\n"+
        "save = save all modifications in a permanent storage.\n"+
        "restore = restore all modifications from the permanent storage.\n"+
        "reset = reset the organizer to factory settings.\n";
}

///////////////////////////////////////////
// Return the value of a given parameter
///////////////////////////////////////////
string getConfigParameter (string name, list parameters) {
    integer index = llListFindList(parameters, [] + ("Param" + name));
    //debug ("Index getParameter pour " + name + " = " + (string) index);
    string returnValue = "";
    if ((index >= 0) && index < (llGetListLength(parameters)-1)) {
        returnValue = llList2String(parameters, index+1);
    }
    //debug ("valeur paramètre pour " + name + " = " + (string) returnValue);
    return returnValue;
}


/////////////////////////////////////////////////////////
// Broadcast the request to get all positions
// of active components of the owner of the organizer
////////////////////////////////////////////////////////
broadcastRegisteringPosition() {

    // clean previous registered items
    list temp = [];
    integer size = llGetListLength(showItems);
    integer i = 0;

    for (i =0; i<size; i= i+4) {
        if (llList2String(showItems, i) != currentShow) {
            temp += llList2String(showItems, i+0);
            temp += llList2String(showItems, i+1);
            temp += llList2String(showItems, i+2);
            temp += llList2String(showItems, i+3);
        }
    }
    showItems = temp;

    temp = [];
    for (i =0; i<size; i= i+3) {
        if (llList2String(posRezzer, i) != currentShow) {
            temp += llList2String(posRezzer, i+0);
            temp += llList2Vector(posRezzer, i+1);
            temp += llList2Rot(posRezzer, i+2);
        }
    }
    posRezzer = temp;
    temp = [];

    //Now collect the  pos and rot and or rezzer
    posRezzer += currentShow;
    posRezzer += llGetPos();
    posRezzer += llGetRot();

    //local im to facilitate the registering process
    llSay(PUBLIC_CHANNEL, llGetDisplayName(llGetOwner()) + " is registering the scene for show " + currentShow);

    // Broadcast registering method to all components
    // whisper to only send the message to object rezzed near the organizer
    llWhisper(channelOrganizer, K_HEADER_MSG_REGISTER_POS_REQUEST);
}

/////////////////////////////////////////////////////////
// Enregistre la position du composant actif pour pouvoir
// le rezzer plus tard
////////////////////////////////////////////////////////
registerPosition(string componentName, string componentType, string globalPos, string globalRot) {
    vector posVector = (vector) globalPos;
    vector rotVector =  (vector)globalRot;

    vector organizerPos = llGetPos();
    vector relativeObjPos = ZERO_VECTOR;
    relativeObjPos.x =  posVector.x - organizerPos.x;
    relativeObjPos.y =  posVector.y - organizerPos.y;
    relativeObjPos.z =  posVector.z - organizerPos.z;

    vector organizerRot = llRot2Euler(llGetRot()) * RAD_TO_DEG;
    vector relativeObjRot = ZERO_VECTOR;
    debug ("Rotation of Organizer " + (string) organizerRot);
    debug ("Rotation of item " + (string) rotVector);
    relativeObjRot.x = rotVector.x- organizerRot.x;
    relativeObjRot.y = rotVector.y - organizerRot.y;
    relativeObjRot.z = rotVector.z - organizerRot.z;
    debug ("Relative Rotation " + (string) relativeObjRot);

    llOwnerSay("Registering "+ componentName + ", a " + componentType + " at relative pos " + (string)relativeObjPos + " with a relative rotation of " + (string)relativeObjRot);

    // strided list of 4 entries
    showItems += currentShow;
    showItems += currentShow + "::" + componentName;
    showItems += relativeObjPos;
    showItems += relativeObjRot;

    //debug
    debug ("dump of showItems list : "+ llDumpList2String(showItems, "|"));
}

/////////////////////////////////////////////////////
// Open the channel to receive chat messages
/////////////////////////////////////////////////////
openChannelCmd (integer channel) {
    listenCmd = llListen (channel, "", llGetOwner(), "");
    channelCmd = channel;
}

/////////////////////////////////////////////////////
// Open the channel to receive organizer messages
/////////////////////////////////////////////////////
openChannelOrganizer (integer channel) {
    listenOrganizer = llListen (channel, "", NULL_KEY, "");
    channelOrganizer = channel;
}

/////////////////////////////////////////////////////
// Initialization
/////////////////////////////////////////////////////
init() {
    showItems = [];
    uuidOrganizer = (integer)llFrand(1000000000.0);
}


//////////////////////////////////////////////////
// Liste all registeredd shows
//////////////////////////////////////////////////
listShows() {
    // clean previous registered items
    list temp = [];
    integer size = llGetListLength(showItems);
    integer i = 0;
    string showName;
    integer index;

    for (i =0; i<size; i= i+4) {
        showName = llList2String(showItems, i);
        index = llListFindList(temp, []+showName);
        if  (index <0) {
            temp +=showName;
        }
    }
    llOwnerSay("List of registered shows : " + llDumpList2String(temp, ", "));
}

//////////////////////////////////////////////////
// List all items of a show
//////////////////////////////////////////////////
displayShow(string showName) {
    // clean previous registered items
    list temp = [];
    integer size = llGetListLength(showItems);
    integer i = 0;
    string tempName;

    for (i =0; i<size; i= i+4) {
        tempName = llList2String(showItems, i);
        if  (tempName == showName) {
            temp +=llList2String(showItems, i+1);
            temp +=(string)llList2Vector(showItems, i+2);
            temp +=(string)llList2Vector(showItems, i+3);

        }
    }
    debug("debug = " + (string)llGetListLength(temp));
    integer ItemsNumber = llGetListLength(temp) / 3;
    size = llGetListLength(temp);
    string description = "Description of show : " + showName + " - " + (string)ItemsNumber + " items" + "\n";
    i=0;
    for (i =0; i<size; i=i+3) {
        string componentName = llList2String(temp, i);
        componentName = llReplaceSubString(componentName,showName+ "::", "", 1);
        description += componentName + ", pos = " + llList2String(temp, i+1) + ", rot = " + llList2String(temp, i+2) + "\n";
    }
    llOwnerSay (description);
}

//////////////////////////////////////////////////
// Rezz a show
//////////////////////////////////////////////////
rezzShow(string showName) {
    integer size = llGetListLength(showItems);
    integer i = 0;
    string name;
    string showNameItem;

    showToRezz = showName;
    buildInventoryRef();

    for (i =0; i<size; i= i+4) {
        showNameItem = llList2String(showItems, i);
        if  (showNameItem == showName) {
            //This item belows to the show. We rezz it
            name =llList2String(showItems, i+1);
            name = llReplaceSubString(name,showName+ "::", "", 1);
            rezObject(getInventoryNameByDesc(name));
        }
    }
}

buildInventoryRef() {
    integer count = llGetInventoryNumber(INVENTORY_ALL);
    integer index;
    inventory = [];
    for (index = 0; index < count; ++index)
    {
        string name = llGetInventoryName(INVENTORY_ALL, index);
        string desc = llGetInventoryDesc(name);

        inventory+= desc;
        inventory+= name;
    }
}

string getInventoryNameByDesc (string desc) {
    integer index = llListFindList(inventory, []+desc);
    if (index >=0) {
        return llList2String(inventory, index+1);
    } else {
        return "";
    }
}

//////////////////////////////////////////////////
// Rezz a item of the inventory
//////////////////////////////////////////////////
rezObject(string name) {
    rotation rot = llEuler2Rot(< 0, 0, 0> * DEG_TO_RAD);
    vector posTarget = llGetPos();
    llRezAtRoot(name,posTarget, llGetPos(), rot, uuidOrganizer);
}

//////////////////////////////////////////////////
// Update the position and rotation of a rezzed prim
//////////////////////////////////////////////////
sendRezzPosition (key uuid, string itemName) {
    string prefixedItemName = showToRezz+ "::"+itemName;
    integer index = llListFindList(showItems, []+prefixedItemName);
    debug ("SendRezzPosition for " + itemName);
    if (index >=0) {
        vector pos;
        vector posVector = llList2Vector(showItems, index+1);
        vector organizerPos = llGetPos();
        pos.x = organizerPos.x + posVector.x;
        pos.y = organizerPos.y + posVector.y;
        pos.z = organizerPos.z + posVector.z;
        debug ("current position of organizer" + (string) organizerPos);
        debug ("shift pod for prim" + (string) posVector);
        debug ("final pos for prim"  + (string) pos);
        vector rot;
        vector rotVector  =  llList2Vector(showItems, index+2);
        vector organizerRot = llRot2Euler(llGetRot());
        rot.x = organizerRot.x + rotVector.x;
        rot.y = organizerRot.y + rotVector.y;
        rot.z = organizerRot.z + rotVector.z;
        debug ("current rotation of organizer" + (string) organizerRot);
        debug ("shift rot for prim" + (string) rotVector);
        debug ("final rot for prim"  + (string) rot);
        debug ("SendRezzPosition at pos: " + (string) pos);

        rot = getAdjustedRot(llEuler2Rot(rot*DEG_TO_RAD));
        pos = getAdjustedPos(pos);
        llRegionSayTo (uuid, channelOrganizer, K_HEADER_MSG_REZZAT_POS_RESPONSE +"|" + (string) pos  +"|" + (string) rot + "|" + showToRezz);
    } else {
        llRegionSayTo (rezzerUser, PUBLIC_CHANNEL, "Object " + itemName + " not found in show " + showToRezz + ". Cannot reposition rezzed object");
    }
}

vector getAdjustedRot (rotation rot) {
    integer index = llListFindList(posRezzer, []+showToRezz);
    rotation rotationInitial = llList2Rot(posRezzer, index+2);
    debug ("adjustement : initial rot = " + (string) (llRot2Euler(rot)*RAD_TO_DEG));
    rotation adjustedRot = (llGetRot()/rotationInitial)*rot;
    debug ("adjustement : adjusted rot = " + (string) (llRot2Euler(adjustedRot) * RAD_TO_DEG));
    return llRot2Euler(adjustedRot) * RAD_TO_DEG;
}

vector getAdjustedPos (vector pos) {

    integer index = llListFindList(posRezzer, []+showToRezz);
    rotation rotationInitial = llList2Rot(posRezzer, index+2);
    rotation rotOrches = llGetRot()/rotationInitial;

    vector posOrchestrateur = llGetPos();
    vector rayon = pos - posOrchestrateur;
    vector rayonRot = rayon * rotOrches;
    return  posOrchestrateur + rayonRot;
}

//////////////////////////////////////////////////
// Unrezz a show
//////////////////////////////////////////////////
unrezzShow(string showName) {
    // Broadcast the unrez msg
    llRegionSay (channelOrganizer, K_HEADER_MSG_UNREZZ +"|" + showName );
}

//////////////////////////////////////////////////
// dump the organizer in a long-time storage script
//////////////////////////////////////////////////
save() {
    integer i = 0;
    integer size = llGetListLength(showItems);

    llMessageLinked(LINK_THIS, K_START_SAVE, "", K_ID_MESSAGELINK_SAVE);

    for (i =0; i<size; i= i+4) {
        llMessageLinked(LINK_THIS, K_SHOW_ITEM_STRING_SAVE, llList2String(showItems, i), K_ID_MESSAGELINK_SAVE);
        llMessageLinked(LINK_THIS, K_SHOW_ITEM_STRING_SAVE, llList2String(showItems, i+1), K_ID_MESSAGELINK_SAVE);
        llMessageLinked(LINK_THIS, K_SHOW_ITEM_VECTOR_SAVE, (string)llList2Vector(showItems, i+2), K_ID_MESSAGELINK_SAVE);
        llMessageLinked(LINK_THIS, K_SHOW_ITEM_VECTOR_SAVE, (string)llList2Vector(showItems, i+3), K_ID_MESSAGELINK_SAVE);
    }

    size = llGetListLength(posRezzer);
    for (i =0; i<size; i= i+3) {
        llMessageLinked(LINK_THIS, K_POS_REZZER_STRING_SAVE, llList2String(posRezzer, i), K_ID_MESSAGELINK_SAVE);
        llMessageLinked(LINK_THIS, K_POS_REZZER_VECTOR_SAVE, (string)llList2Vector(posRezzer, i+1), K_ID_MESSAGELINK_SAVE);
        llMessageLinked(LINK_THIS, K_POS_REZZER_VECTOR_SAVE, (string)llList2Vector(posRezzer, i+2), K_ID_MESSAGELINK_SAVE);
    }

    llMessageLinked(LINK_THIS, K_END_SAVE, "", K_ID_MESSAGELINK_SAVE);
}

//////////////////////////////////////////////////
// restore the organizer from a long-time storage script
//////////////////////////////////////////////////
restore() {
    llOwnerSay ("***** Restoring the organizer. Please wait...");
    showItems = [];
    posRezzer = [];
    llMessageLinked(LINK_THIS, K_START_RESTORE, "", K_ID_MESSAGELINK_RESTORE);
}

default {
    state_entry() {
        init();
        getConfig();
    }

    link_message(integer sender_num, integer idMessage, string msg, key idTarget) {
        if ((string)idTarget == K_ID_MESSAGELINK_ORGANIZER) {
            // if (idMessage == K_MSGLINK_REGISTER_REQUEST) {
            //     broadcastRegisteringPosition();
            // }
        } else if ((idMessage == K_CHANNEL_CONFIG) && ((string)idTarget == K_ID_MESSAGELINK_CONFIG_FROM)) {
            //this is the config sent by the configSrv
            list parameters = llParseString2List(msg, ["|"], []);

            string value = getConfigParameter("channelCmd", parameters);
            if ((integer)value != 0) {
                openChannelCmd((integer)value);
            }

            value = getConfigParameter("channelOrganizer", parameters);
            if ((integer)value != 0) {
                openChannelOrganizer((integer)value);
            }

        } else if ((string)idTarget == K_ID_MESSAGELINK_RESTORE)  {
            if (idMessage == K_END_RESTORE){
                llOwnerSay ("***** FM Organizer successfully restored.");
            } else if (idMessage == K_SHOW_ITEM_STRING_RESTORE){
                showItems += msg;
            } else if (idMessage == K_SHOW_ITEM_VECTOR_RESTORE){
                showItems += (vector)msg;
            } else if (idMessage == K_POS_REZZER_STRING_RESTORE){
                posRezzer += msg;
            }  else if (idMessage == K_POS_REZZER_VECTOR_RESTORE){
                posRezzer += (vector)msg;
            }
        }

    }

    listen( integer channel, string name, key id, string message ) {
        if (channel == channelOrganizer) {
            if (llGetOwnerKey(id)==llGetOwner()) {
                list response = llParseString2List(message, ["|"],[]);
                string cmd = llList2String(response,0);

                if (cmd == K_HEADER_MSG_REGISTER_POS_RESPONSE) {
                    // register position
                    string componentName = llList2String(response,1);
                    string componentType = llList2String(response,2);
                    string globalPos = llList2String(response,3);
                    string globalRot = llList2String(response,4);
                    debug ("Received a response to register " + componentName);
                    registerPosition(componentName, componentType, globalPos, globalRot);
                } else if (cmd == K_HEADER_MSG_REZZAT_POS_REQUEST) {
                    string itemDesc = llList2String(response,1);
                    if (llGetListLength(response) >= 3) {
                        integer uuidRezz = (integer) llList2String(response, 2);
                        if (uuidOrganizer == uuidRezz) {
                            sendRezzPosition(id, itemDesc);
                        }
                    }
                }
            }

        } else if (channel == channelCmd) {

            // here we define commands that are only available for the
            // owner of the organizer.
            if (llToLower(message) == "register") {
                if (id == llGetOwner()) {
                    broadcastRegisteringPosition();
                }
            } else if (llToLower(message) == "list") {
                if (id == llGetOwner()) {
                    listShows();
                }
            } else if (llToLower(message) == "help") {
                if (id == llGetOwner()) {
                    llOwnerSay(getHelp());
                }
            } else {
                string msg = llStringTrim(message, STRING_TRIM);
                list response = llParseString2List(msg, [" "],[]);
                string cmd = llToLower(llList2String(response,0));
                if (cmd == "list") {
                    if (id == llGetOwner()) {
                        displayShow( llToLower(llList2String(response,1)));
                    }
                } else if (cmd == "name") {
                    if (id == llGetOwner()) {
                        currentShow = llToLower(llList2String(response,1));
                        debug ("Current show name to register is now " + currentShow);
                    }
                } else if (cmd == "rezz") {
                    rezzerUser = id;
                    rezzShow( llToLower(llList2String(response,1)));
                } else if (cmd == "unrezz") {
                    rezzerUser = id;
                    unrezzShow(llToLower(llList2String(response,1)));
                }  else if (cmd == "save") {
                    if (id == llGetOwner()) {
                        save();
                    }
                }  else if (cmd == "restore") {
                    if (id == llGetOwner()) {
                        restore();
                    }
                }  else if (cmd == "reset") {
                    if (id == llGetOwner()) {
                        llOwnerSay ("FM Organizer reset.");
                        llResetScript();
                    }
                }
            }
        }
    }

    on_rez(integer start_param) {
        llResetScript();
    }

}

